{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset2 Symbol;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 6.3.9600}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\f0\fs22\lang9 Moq - It.IsAny<T> ...\b0\par
{{\field{\*\fldinst{HYPERLINK http://www.russellallen.info/post/Unit-Testing-Good-Patterns-3-Know-Your-Moq-Argument-Matchers!.aspx }}{\fldrslt{http://www.russellallen.info/post/Unit-Testing-Good-Patterns-3-Know-Your-Moq-Argument-Matchers!.aspx\ul0\cf0}}}}\f0\fs22  \par
\b Unit Testing Good Patterns #3 - Know Your Moq Argument Matchers\par
\b0 Having spent some time working with Moq, I've found that understanding the argument matchers bundled up in the "It" class is pretty useful stuff. The "It" class is a static class with a few methods on it that are used to tell Moq about the arguments it should expect to receive from your code.\par
This post is going to be a fairly in depth run through of the core two It methods - It.IsAny<T> and It.Is<T>(a => a....) - followed by a quick skim through the less used It.IsInRange and It.IsRegex methods.\par
\b What Are Argument Matchers?\par

\pard\sl276\slmult1\b0 When you're working with Moq, generally you:\par

\pard 
{\pntext\f0 1.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pndec{\pntxta.}}
\fi-360\li720\sl276\slmult1 Create a Moq object\par
{\pntext\f0 2.\tab}Use Moq.Setup(x => x.MethodName()) to configure expectations on your Moq object, and what the Moq object should do in response, for example returning a value, throwing an exception, etc.\par
{\pntext\f0 3.\tab}Pass your Moq object into your code-under-test\par
{\pntext\f0 4.\tab}Your code-under-test calls methods on the Moq object\par
{\pntext\f0 5.\tab}The Moq object records every method call it receives.\par
{\pntext\f0 6.\tab}Moq examines each of these method calls, compares them to any methods that you've configured, and if there's a match, Moq will either behave as configured in step 2 above or return null.\par

\pard 
{\pntext\f0 7.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pndec{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1 When your code-under-test is finished, you can use Moq.Verify(x => x.MethodName()) to check that the Moq object log contains calls to methods that you expect.\par

\pard\sa200\sl276\slmult1 In steps 2 and 7 above, you know what methods you want to setup or verify, but sometimes you don't know or don't care about their arguments, this is where you'll need argument matchers. Remember that in step 6 above Moq is waiting for method calls that it can do something with, when you're doing your Setup in step 2 you can be more or less specific about the arguments that Moq is waiting for.\par
In the simplest case, you will be mocking methods with no arguments. For example if your code under test does the following:\par

\pard\li720\sl276\slmult1 public static CupOfTea Provide(ITeabag teabag)\par
\{\par
  var cupOfTea = new CupOfTea();\par
  teabag.CupOfTea = cupOfTea;\par
  teabag.Brew();\par
  return cupOfTea;\par

\pard\li720\sa200\sl276\slmult1\}\par

\pard\sa200\sl276\slmult1 You could write a simple test to ensure that your teabag is appropriately brewed as follows:\par

\pard\li720\sl276\slmult1 public void Provide_TeaBagIsBrewed()\par
\{\par
  var mockTeabag = new Mock<ITeabag>();\par
  teaProvider.Provide(mockTeabag.Object);\par
  mockTeabag.Verify(x => x.Brew());\par

\pard\li720\sa200\sl276\slmult1\}\par

\pard\sa200\sl276\slmult1 Note that on the last line, we're verifying that our code called the method "Brew" on our mock teabag. When you write in that lambda expression, Moq doesn't actually execute it, instead it dismantles it and compares it to any invocations it saw to make sure there's a match. But what about method calls that require arguments?\par
\par
\b I want my argument to be a specific value\par
\b0 Consider that you want to test the following code:\par

\pard\li720\sl276\slmult1 public static CupOfTea ProvideStrongTea(ITeabag teabag)\par
\{\par
  var cupOfTea = new CupOfTea();\par
  teabag.CupOfTea = cupOfTea;\par
  teabag.Brew(30); // Brew tea for 30 seconds\par
  return cupOfTea;\par

\pard\li720\sa200\sl276\slmult1\}\par

\pard\sa200\sl276\slmult1 Note that this time we're asking for particularly strong tea, so we want to verify that when we call the Brew method, we're calling it with an appropriate duration:\par

\pard\li720\sl276\slmult1 public void ProvideStrongTea_TeabagIsBrewedFor30Seconds()\par
\{\par
  var mockTeabag = new Mock<ITeabag>();\par
  teaProvider.Provide(mockTeabag.Object);\par
  mockTeabag.Verify(x => x.Brew(30));\par

\pard\li720\sa200\sl276\slmult1\}\par

\pard\sa200\sl276\slmult1 Simple enough, right?\par
\par
\b Matching Mock Arguments vs Stub Arguments \par
\b0 Now's probably a good time to talk about Stubs vs Mocks. I like to keep things simple, and use between two different types of fake object (there's plenty of discussion about these two terms, but the following's not a million miles away from consensus):\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\i Mock Objects\i0  - These are used verify the interactions between your code and the object being mocked. You will normally assert against a Mock, via the Verify method as shown above.\par
{\pntext\f1\'B7\tab}\i Stub Objects\i0  - These are used simply to help your code execute, so that you can test other things in your code.\par

\pard\sa200\sl276\slmult1 When you're working with Moq, it pays to be very specific about the way you verify against your Mock objects, I think you should know exactly how your code is interacting with the external dependency that you're mocking. But with stubs, the opposite seems to be true. You only use stubs to help your tests complete, so if you're very specific about how you expect stubs to behave, I think you're making your tests too brittle. Every time you change the argument being passed into your stubs, you don't want to have to fix loads of tests.\par
\par
\b I don't care what the arguments are.\par
\b0 When you're using a stub, where you shouldn't really care about the arguments, you just need to return something so your test works. In the following code, we've done away with the bog standard old ITeabag - we now have an ITeabagFactory, so we can have a cup of Decaf if we like.\par

\pard\li720\sl276\slmult1 public static CupOfTea ProvideDecafTea(ITeabagFactory teabagFactory)\par
\{\par
  var cupOfTea = new CupOfTea();\par
  ITeabag teabag = teabagFactory.Create(TeabagType.Decaf);\par
  return teabag.Brew(cupOfTea);\par

\pard\li720\sa200\sl276\slmult1\}\par

\pard\sa200\sl276\slmult1 And now I want to do the simplest test in the world - I want to test that the above code works, and returns us a valid CupOfTea object, as follows:\par

\pard\li720\sl276\slmult1 public void ProvideStrongTea_TeabagIsBrewedFor30Seconds()\par
\{\par
  var mockTeabagFactory = new Mock<ITeabagFactory>();\par
  var cupOfTea = teaProvider.Provide(mockTeabagFactory.Object);\par
  Assert.IsNotNull(cupOfTea);\par

\pard\li720\sa200\sl276\slmult1\}\par

\pard\sa200\sl276\slmult1 But darn it, we get a NullReferenceException. Inside our code under test, when we call the ITeabagFactory.Create method, we haven't done a Setup on the Moq object, so we get a null teabag back, and noone wants to brew up with a null teabag. Let's fix our test:\par

\pard\li720\sl276\slmult1 public void ProvideStrongTea_TeabagIsBrewedFor30Seconds()\par
\{\par
  var mockTeabagFactory = new Mock<ITeabagFactory>();\par
  mockTeabagFactory.Setup(x => x.Create(It.IsAny<TeabagType>()))\line\tab\tab\tab\tab\tab\tab .Returns(new DecafTeabag());\par
  var cupOfTea = teaProvider.Provide(mockTeabagFactory.Object);\par
  Assert.IsNotNull(cupOfTea);\par

\pard\li720\sa200\sl276\slmult1\}\par

\pard\sa200\sl276\slmult1 We've added a Setup that returns a new DecafTeabag, but note that I'm now using "It.IsAny<TeabagType>()" in my setup instead of the literal "TeabagType.Decaf". Remeber, Moq doesn't actually execute the Create method, it's breaking it up into bits, and saying, "If I get any calls to the Create method, and I get an argument that's a valid TeabagType, then I'm going to return a new DecafTeabag object."\par
\par
\b I just want to make sure the argument's not null\par
\b0 I had a chat with a co-ninja at work the other day, where we made the suprising discovery that as far as Moq is concerned, if you pass in a null object, it still considers that to be a match according to the It.IsAny<T>() matcher. After much rumination, we decided we were cool with that, but it did leave the question, how do we make sure that at least an object is not null? And on that note, why would you want to do this anyhow?\par

\pard\li720\sl276\slmult1 public static CupOfTea ProvideTea(ITeabag teabag)\par
\{\par
  var cupOfTea = null;\par
  teabag.Brew(cupOfTea);\par
  return cupOfTea;\par

\pard\li720\sa200\sl276\slmult1\}\par

\pard\sa200\sl276\slmult1 The above code snippet is a variant on the first example, but with an obvious bug added - we're attempting to brew our teabag in a null cup! (I'm struggling to extract any drama out of this fictional scenario) Let's write a simple test to catch this:\par

\pard\li720\sl276\slmult1 public void ProvideTea_CupOfTeaIsNotNull()\par
\{\par
  var mockTeabag = new Mock<ITeabag>();\par
  teaProvider.ProvideTea(mockTeabag.Object);\par
  mockTeabag.Verify(x => x.Brew(It.Is<CupOfTea>(a => a != null)));\par

\pard\li720\sa200\sl276\slmult1\}\par

\pard\sa200\sl276\slmult1 We're now using a new matcher, the "It.Is<T>(a => a...)" matcher. Moq compares the actual invocations to the setups/verifies you've configured, it looks at the argument it's received from your code (in this case null), and it runs the argument through the lambda specified (in this case a => a != null). In our case this lambda returns "false", so Moq fails the verify statement and fails the test.\par
Hint : Be careful not to reuse the "x" token in your argument matcher lambda expression by the way, I recall that that caused us a little head scratching!\par
Now onto our second question - why would you want to assert that your argument's not null? The only valid case I can think is the one above, where we're constructing an object inside our code-under-test and using it immediately, so there's no way we can know anything about this object other than it exists. In general however, I think checking that argument are not null is a fail. Remember my suggestion above re mocks vs stubs, you either want to have strong asserts or no asserts, this is an uncomfortable middle ground.\par
\par
\b I want my argument to have specific criteria\par
\b0 Okay, enough of the dumb ITeabag stuff, if you've stuck with it this far you obviously get the gist, so let's quickly nip through the next few matchers available to us.\par
We've seen the "It.IsAny<T>(a => a...)" argument matcher above, you can actually do anything you like with your argument using this matcher. You could for example have a method that validates the argument against all sorts of criteria and returns a true or false, you could then have a verify that was something like:\par

\pard\li720\sl276\slmult1 mockTeabag.Verify(x => x.Brew(It.Is<CupOfTea>(a => ValidCupForTea(a)));\par
...\par
bool ValidCupForTea(CupOfTea cupOfTea)\par
\{\par
  return (cupOfTea.IsClean)\par
    && (cupOfTea.IsHeatProof)\par
    && (cupOfTea.HasHandle);\par

\pard\li720\sa200\sl276\slmult1\}\par

\pard\sa200\sl276\slmult1\b My argument must be in a valid range\par
\b0 I've had very little cause to use this matcher myself yet, but it's fairly self-explanatory, its usage is something like:\par

\pard\li720\sa200\sl276\slmult1 mockKettle.Verify(x => x.HeatWaterToTemperature(It.IsInRange<int>(85, 100, Range.Inclusive)));\par

\pard\sa200\sl276\slmult1 Note that you can setup here whether the range is inclusive or exclusive,\par
\par
\b My argument must match a regex pattern\par
\b0 I can imagine more uses for this matcher, but again I've not had much need to use it myself. This one goes something like:\par

\pard\li720\sa200\sl276\slmult1 mockTeabagFactory.Verify(x => x.GetTeabagByName(It.IsRegex("Premium")));\par

\pard\sa200\sl276\slmult1 The options are the standard Microsoft RegexOptions enum.\par
\par
And that concludes my quick runthrough of the Moq argument matchers. Hope you enjoyed!\par
\par
\par
Currently rated 4.3 by 6 people\par
}
 