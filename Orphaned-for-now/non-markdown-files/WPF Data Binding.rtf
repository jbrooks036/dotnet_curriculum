{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Arial;}{\f1\fnil\fcharset2 Symbol;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 6.3.9600}\viewkind4\uc1 
\pard\sa200\sl276\slmult1 {\fs28\lang9{\field{\*\fldinst{HYPERLINK https://msdn.microsoft.com/en-us/library/ms752347%28v=vs.110%29.aspx }}{\fldrslt{https://msdn.microsoft.com/en-us/library/ms752347%28v=vs.110%29.aspx\ul0\cf0}}}}\f0\fs28\line\ul\b\fs32\par
Data Binding Overview\par
\ulnone .NET Framework 4.5\par
\b0\fs24 Windows Presentation Foundation (WPF) data binding provides a simple and consistent way for applications to present and interact with data. Elements can be bound to data from a variety of data sources in the form of common language runtime (CLR) objects and XML. ContentControls such as Button and ItemsControls such as ListBox and ListView have built-in functionality to enable flexible styling of single data items or collections of data items. Sort, filter, and group views can be generated on top of the data.\par
The data binding functionality in WPF has several advantages over traditional models, including a broad range of properties that inherently support data binding, flexible UI representation of data, and clean separation of business logic from UI.\par
This topic first discusses concepts fundamental to WPF data binding and then goes into the usage of the Binding class and other features of data binding.\par

\pard\sl276\slmult1 This topic contains the following sections.\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl276\slmult1     What Is Data Binding?\par
{\pntext\f1\'B7\tab}    Basic Data Binding Concepts\par
{\pntext\f1\'B7\tab}    Creating a Binding\par
{\pntext\f1\'B7\tab}    Data Conversion\par
{\pntext\f1\'B7\tab}    Binding to Collections\par
{\pntext\f1\'B7\tab}    Data Templating\par
{\pntext\f1\'B7\tab}    Data Validation\par
{\pntext\f1\'B7\tab}    Debugging Mechanism\par
{\pntext\f1\'B7\tab}    Related Topics\par

\pard\sa200\sl276\slmult1\par
\b\fs32 What Is Data Binding?\par
\b0\fs24 Data binding is the process that establishes a connection between the application UI and business logic. If the binding has the correct settings and the data provides the proper notifications, then, when the data changes its value, the elements that are bound to the data reflect changes automatically. Data binding can also mean that if an outer representation of the data in an element changes, then the underlying data can be automatically updated to reflect the change. For example, if the user edits the value in a TextBox element, the underlying data value is automatically updated to reflect that change.\par
A typical use of data binding is to place server or local configuration data into forms or other UI controls. In WPF, this concept is expanded to include the binding of a broad range of properties to a variety of data sources. In WPF, dependency properties of elements can be bound to CLR objects (including ADO.NET objects or objects associated with Web Services and Web properties) and XML data.\par
For an example of data binding, take a look at the following application UI from the Data Binding Demo:\par
Data binding sample screen shot\par
The above is the UI of an application that displays a list of auction items. The application demonstrates the following features of data binding:\par
    The content of the ListBox is bound to a collection of AuctionItem objects. An AuctionItem object has properties such as Description, StartPrice, StartDate, Category, SpecialFeatures, etc.\par
    The data (AuctionItem objects) displayed in the ListBox is templated so that the description and the current price are shown for each item. This is done using a DataTemplate. In addition, the appearance of each item depends on the SpecialFeatures value of the AuctionItem being displayed. If the SpecialFeatures value of the AuctionItem is Color, the item has a blue border. If the value is Highlight, the item has an orange border and a star. The Data Templating section provides information about data templating.\par
    The user can group, filter, or sort the data using the CheckBoxes provided. In the image above, the "Group by category" and "Sort by category and date" CheckBoxes are selected. You may have noticed that the data is grouped based on the category of the product, and the category name is in alphabetical order. It is difficult to notice from the image but the items are also sorted by the start date within each category. This is done using a collection view. The Binding to Collections section discusses collection views.\par
    When the user selects an item, the ContentControl displays the details of the selected item. This is called the Master-Detail scenario. The Master-Detail Scenario section provides information about this type of binding scenario.\par
    The type of the StartDate property is DateTime, which returns a date that includes the time to the millisecond. In this application, a custom converter has been used so that a shorter date string is displayed. The Data Conversion section provides information about converters.\par
When the user clicks the Add Product button, the following form comes up:\par
\i Add Product Listing page\i0\par
The user can edit the fields in the form, preview the product listing using the short preview and the more detailed preview panes, and then click submit to add the new product listing. Any existing grouping, filtering and sorting functionalities will apply to the new entry. In this particular case, the item entered in the above image will be displayed as the second item within the Computer category.\par
Not shown in this image is the validation logic provided in the Start Date TextBox. If the user enters an invalid date (invalid formatting or a past date), the user will be notified with a ToolTip and a red exclamation point next to the TextBox. The Data Validation section discusses how to create validation logic.\par
Before going into the different features of data binding outlined above, we will first discuss in the next section the fundamental concepts that are critical to understanding WPF data binding.\par
\b\fs32 Basic Data Binding Concepts\par

\pard\sl276\slmult1\b0\fs24 This section contains the following subsections.\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1     Direction of the Data Flow\par
{\pntext\f1\'B7\tab}    What Triggers Source Updates\line\par

\pard\sa200\sl276\slmult1 Regardless of what element you are binding and the nature of your data source, each binding always follows the model illustrated by the following figure:\par
Basic data binding diagram\par
As illustrated by the above figure, data binding is essentially the bridge between your binding target and your binding source. The figure demonstrates the following fundamental WPF data binding concepts:\par
    Typically, each binding has these four components: a binding target object, a target property, a binding source, and a path to the value in the binding source to use. For example, if you want to bind the content of a TextBox to the Name property of an Employee object, your target object is the TextBox, the target property is the Text property, the value to use is Name, and the source object is the Employee object.\par
    The target property must be a dependency property. Most UIElement properties are dependency properties and most dependency properties, except read-only ones, support data binding by default. (Only DependencyObject types can define dependency properties and all UIElements derive from DependencyObject.)\par
    Although not specified in the figure, it should be noted that the binding source object is not restricted to being a custom CLR object. WPF data binding supports data in the form of CLR objects and XML. To provide some examples, your binding source may be a UIElement, any list object, a CLR object that is associated with ADO.NET data or Web Services, or an XmlNode that contains your XML data. For more information, see Binding Sources Overview.\par
As you read through other software development kit (SDK) topics, it is important to remember that when you are establishing a binding, you are binding a binding target to a binding source. For example, if you are displaying some underlying XML data in a ListBox using data binding, you are binding your ListBox to the XML data.\par
To establish a binding, you use the Binding object. The rest of this topic discusses many of the concepts associated with and some of the properties and usage of the Binding object.\par
\b\fs32 Direction of the Data Flow\par
\b0\fs24 As mentioned previously and as indicated by the arrow in the figure above, the data flow of a binding can go from the binding target to the binding source (for example, the source value changes when a user edits the value of a TextBox) and/or from the binding source to the binding target (for example, your TextBox content gets updated with changes in the binding source) if the binding source provides the proper notifications.\par
You may want your application to enable users to change the data and propagate it back to the source object. Or you may not want to enable users to update the source data. You can control this by setting the Mode property of your Binding object. The following figure illustrates the different types of data flow:\par
\b\fs32 Data binding data flow\b0\fs24\par
    OneWay binding causes changes to the source property to automatically update the target property, but changes to the target property are not propagated back to the source property. This type of binding is appropriate if the control being bound is implicitly read-only. For instance, you may bind to a source such as a stock ticker or perhaps your target property has no control interface provided for making changes, such as a data-bound background color of a table. If there is no need to monitor the changes of the target property, using the OneWay binding mode avoids the overhead of the TwoWay binding mode.\par
    TwoWay binding causes changes to either the source property or the target property to automatically update the other. This type of binding is appropriate for editable forms or other fully-interactive UI scenarios. Most properties default to OneWay binding, but some dependency properties (typically properties of user-editable controls such as the Text property of TextBox and the IsChecked property of CheckBox) default to TwoWay binding. A programmatic way to determine whether a dependency property binds one-way or two-way by default is to get the property metadata of the property using GetMetadata and then check the Boolean value of the BindsTwoWayByDefault property.\par
    OneWayToSource is the reverse of OneWay binding; it updates the source property when the target property changes. One example scenario is if you only need to re-evaluate the source value from the UI.\par
    Not illustrated in the figure is OneTime binding, which causes the source property to initialize the target property, but subsequent changes do not propagate. This means that if the data context undergoes a change or the object in the data context changes, then the change is not reflected in the target property. This type of binding is appropriate if you are using data where either a snapshot of the current state is appropriate to use or the data is truly static. This type of binding is also useful if you want to initialize your target property with some value from a source property and the data context is not known in advance. This is essentially a simpler form of OneWay binding that provides better performance in cases where the source value does not change.\par
Note that to detect source changes (applicable to OneWay and TwoWay bindings), the source must implement a suitable property change notification mechanism such as INotifyPropertyChanged. See How to: Implement Property Change Notification for an example of an INotifyPropertyChanged implementation.\par
The Mode property page provides more information about binding modes and an example of how to specify the direction of a binding.\par
\b\fs32 What Triggers Source Updates\par
\b0\fs24 Bindings that are TwoWay or OneWayToSource listen for changes in the target property and propagate them back to the source. This is known as updating the source. For example, you may edit the text of a TextBox to change the underlying source value. As described in the last section, the direction of the data flow is determined by the value of the Mode property of the binding.\par
However, does your source value get updated while you are editing the text or after you finish editing the text and point your mouse away from the TextBox? The UpdateSourceTrigger property of the binding determines what triggers the update of the source. The dots of the right arrows in the following figure illustrate the role of the UpdateSourceTrigger property:\par
\i UpdateSourceTrigger diagram\par
\i0 If the UpdateSourceTrigger value is PropertyChanged, then the value pointed to by the right arrow of TwoWay or the OneWayToSource bindings gets updated as soon as the target property changes. However, if the UpdateSourceTrigger value is LostFocus, then that value only gets updated with the new value when the target property loses focus.\par
Similar to the Mode property, different dependency properties have different default UpdateSourceTrigger values. The default value for most dependency properties is PropertyChanged, while the Text property has a default value of LostFocus. This means that source updates usually happen whenever the target property changes, which is fine for CheckBoxes and other simple controls. However, for text fields, updating after every keystroke can diminish performance and it denies the user the usual opportunity to backspace and fix typing errors before committing to the new value. That is why the Text property has a default value of LostFocus instead of PropertyChanged.\par
See the UpdateSourceTrigger property page for information about how to find the default UpdateSourceTrigger value of a dependency property.\par
The following table provides an example scenario for each UpdateSourceTrigger value using the TextBox as an example:\par
UpdateSourceTrigger value\par
When the Source Value Gets Updated\par
Example Scenario for TextBox\par
LostFocus (default for TextBox.Text)\par
When the TextBox control loses focus\par
A TextBox that is associated with validation logic (see Data Validation section)\par
PropertyChanged\par
As you type into the TextBox\par
TextBox controls in a chat room window\par
Explicit\par
When the application calls UpdateSource\par
TextBox controls in an editable form (updates the source values only when the user clicks the submit button)\par
For an example, see How to: Control When the TextBox Text Updates the Source.\par
\b\fs32 Creating a Binding\b0\fs24\par

\pard\sl276\slmult1 This section contains the following subsections.\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl276\slmult1     Specifying the Binding Source\par
{\pntext\f1\'B7\tab}    Specifying the Path to the Value\par
{\pntext\f1\'B7\tab}    Binding and BindingExpression\par

\pard\sa200\sl276\slmult1 To recapitulate some of the concepts discussed in the previous sections, you establish a binding using the Binding object, and each binding usually has four components: binding target, target property, binding source, and a path to the source value to use. This section discusses how to set up a binding.\par
Consider the following example, in which the binding source object is a class named MyData that is defined in the SDKSample namespace. For demonstration purposes, MyData class has a string property named ColorName, of which the value is set to "Red". Thus, this example generates a button with a red background.\par

\pard\sl276\slmult1 XAML\par
\par
<DockPanel\par
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\par
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\par
  xmlns:c="clr-namespace:SDKSample">\par
  <DockPanel.Resources>\par
    <c:MyData x:Key="myDataSource"/>\par
  </DockPanel.Resources>\par
  <DockPanel.DataContext>\par
    <Binding Source="\{StaticResource myDataSource\}"/>\par
  </DockPanel.DataContext>\par
  <Button Background="\{Binding Path=ColorName\}"\par
          Width="150" Height="30">I am bound to be RED!</Button>\par
</DockPanel>\line\par

\pard\sa200\sl276\slmult1 For more details on the binding declaration syntax and for examples of how to set up a binding in code, see Binding Declarations Overview.\par
If we apply this example to our basic diagram, the resulting figure looks like the following. This is a OneWay binding because the Background property supports OneWay binding by default.\par
\i Data binding diagram\par
\i0 You may wonder why this works even though the ColorName property is of type string while the Background property is of type Brush. This is default type conversion at work and is discussed in the Data Conversion section.\par
\b\fs32 Specifying the Binding Source\b0\fs24\par
Notice that in the previous example, the binding source is specified by setting the DataContext property on the DockPanel element. The Button then inherits the DataContext value from the DockPanel, which is its parent element. To reiterate, the binding source object is one of the four necessary components of a binding. Therefore, without the binding source object being specified, the binding would do nothing.\par
There are several ways to specify the binding source object. Using the DataContext property on a parent element is useful when you are binding multiple properties to the same source. However, sometimes it may be more appropriate to specify the binding source on individual binding declarations. For the previous example, instead of using the DataContext property, you can specify the binding source by setting the Source property directly on the binding declaration of the button, as in the following example:\par

\pard\sl240\slmult1 XAML\par
<DockPanel.Resources>\par
  <c:MyData x:Key="myDataSource"/>\par
</DockPanel.Resources>\par
<Button Width="150" Height="30"\par
        Background="\{Binding Source=\{StaticResource myDataSource\},\par
                             Path=ColorName\}">I am bound to be RED!</Button>\line\par

\pard\sa200\sl276\slmult1 Other than setting the DataContext property on an element directly, inheriting the DataContext value from an ancestor (such as the button in the first example), and explicitly specifying the binding source by setting the Source property on the Binding (such as the button the last example), you can also use the ElementName property or the RelativeSource property to specify the binding source. The ElementName property is useful when you are binding to other elements in your application, such as when you are using a slider to adjust the width of a button. The RelativeSource property is useful when the binding is specified in a ControlTemplate or a Style. For more information, see How to: Specify the Binding Source.\par
\b\fs32 Specifying the Path to the Value\b0\fs24\par
If your binding source is an object, you use the Path property to specify the value to use for your binding. If you are binding to XML data, you use the XPath property to specify the value. In some cases, it may be applicable to use the Path property even when your data is XML. For example, if you want to access the Name property of a returned XmlNode (as a result of an XPath query), you should use the Path property in addition to the XPath property.\par
For syntax information and examples, see the Path and XPath property pages.\par
Note that although we have emphasized that the Path to the value to use is one of the four necessary components of a binding, in the scenarios which you want to bind to an entire object, the value to use would be the same as the binding source object. In those cases, it is applicable to not specify a Path. Consider the following example:\par

\pard\sl240\slmult1 XAML\par
<ListBox ItemsSource="\{Binding\}"\par
         IsSynchronizedWithCurrentItem="true"/>\par
\par

\pard\sa200\sl276\slmult1 The above example uses the empty binding syntax: \{Binding\}. In this case, the ListBox inherits the DataContext from a parent DockPanel element (not shown in this example). When the path is not specified, the default is to bind to the entire object. In other words, in this example, the path has been left out because we are binding the ItemsSource property to the entire object. (See the Binding to Collections section for an in-depth discussion.)\par
Other than binding to a collection, this scenario is also useful when you want to bind to an entire object instead of just a single property of an object. For example, if your source object is of type string and you simply want to bind to the string itself. Another common scenario is when you want to bind an element to an object with several properties.\par
Note that you may need to apply custom logic so that the data is meaningful to your bound target property. The custom logic may be in the form of a custom converter (if default type conversion does not exist). See Data Conversion for information about converters.\b\fs32\par
Binding and BindingExpression\b0\fs24\par
Before getting into other features and usages of data binding, it would be useful to introduce the BindingExpression class. As you have seen in previous sections, the Binding class is the high-level class for the declaration of a binding; the Binding class provides many properties that allow you to specify the characteristics of a binding. A related class, BindingExpression, is the underlying object that maintains the connection between the source and the target. A binding contains all the information that can be shared across several binding expressions. A BindingExpression is an instance expression that cannot be shared and contains all the instance information of the Binding.\par
For example, consider the following, where myDataObject is an instance of MyData class, myBinding is the source Binding object, and MyData class is a defined class that contains a string property named MyDataProperty. This example binds the text content of mytext, an instance of TextBlock, to MyDataProperty.\par

\pard\sl276\slmult1 //make a new source\par
  MyData myDataObject = new MyData(DateTime.Now);      \par
  Binding myBinding = new Binding("MyDataProperty");\par
  myBinding.Source = myDataObject;\par
  myText.SetBinding(TextBlock.TextProperty, myBinding);\line\par

\pard\sa200\sl276\slmult1 You can use the same myBinding object to create other bindings. For example, you may use myBinding object to bind the text content of a check box to MyDataProperty. In that scenario, there will be two instances of BindingExpression sharing the myBinding object.\par
A BindingExpression object can be obtained through the return value of calling GetBindingExpression on a data-bound object. The following topics demonstrate some of the usages of the BindingExpression class:\par
    How to: Get the Binding Object from a Bound Target Property\par
    How to: Control When the TextBox Text Updates the Source\par
\b\fs32 Data Conversion\par
\b0\fs24 In the previous example, the button is red because its Background property is bound to a string property with the value "Red". This works because a type converter is present on the Brush type to convert the string value to a Brush.\par
To add this information to the figure in the Creating a Binding section, the diagram looks like the following:\par
\i Data binding diagram\i0\par
However, what if instead of having a property of type string your binding source object has a Color property of type Color? In that case, in order for the binding to work you would need to first turn the Color property value into something that the Background property accepts. You would need to create a custom converter by implementing the IValueConverter interface, as in the following example:\par

\pard\sl276\slmult1 [ValueConversion(typeof(Color), typeof(SolidColorBrush))]\par
public class ColorBrushConverter : IValueConverter\par
\{\par
    public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)\par
    \{\par
        Color color = (Color)value;\par
        return new SolidColorBrush(color);\par
    \}\par
\par
    public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)\par
    \{\par
        return null;\par
    \}\par
\}\par
\par

\pard\sa200\sl276\slmult1 The IValueConverter reference page provides more information.\par
Now the custom converter is used instead of default conversion, and our diagram looks like this:\par
\i Data binding diagram\i0\par
To reiterate, default conversions may be available because of type converters that are present in the type being bound to. This behavior will depend on which type converters are available in the target. If in doubt, create your own converter.\par
Following are some typical scenarios where it makes sense to implement a data converter:\par
    Your data should be displayed differently, depending on culture. For instance, you might want to implement a currency converter or a calendar date/time converter based on the values or standards used in a particular culture.\par
    The data being used is not necessarily intended to change the text value of a property, but is instead intended to change some other value, such as the source for an image, or the color or style of the display text. Converters can be used in this instance by converting the binding of a property that might not seem to be appropriate, such as binding a text field to the Background property of a table cell.\par
    More than one control or to multiple properties of controls are bound to the same data. In this case, the primary binding might just display the text, whereas other bindings handle specific display issues but still use the same binding as source information.\par
    So far we have not yet discussed MultiBinding, where a target property has a collection of bindings. In the case of a MultiBinding, you use a custom IMultiValueConverter to produce a final value from the values of the bindings. For example, color may be computed from red, blue, and green values, which can be values from the same or different binding source objects. See the MultiBinding class page for examples and information.\par
\b\fs32 Binding to Collections\par
\b0\fs24 This section contains the following subsections.\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1     How to Implement Collections\par
{\pntext\f1\'B7\tab}    Collection Views\line\par

\pard\sa200\sl276\slmult1 A binding source object can be treated either as a single object of which the properties contain data or as a data collection of polymorphic objects that are often grouped together (such as the result of a query to a database). So far we've only discussed binding to single objects, however, binding to a data collection is a common scenario. For example, a common scenario is to use an ItemsControl such as a ListBox, ListView, or TreeView to display a data collection, such as in the application shown in the What Is Data Binding? section.\par
Fortunately, our basic diagram still applies. If you are binding an ItemsControl to a collection, the diagram looks like this:\par
\i Data binding Items    Control diagram\par
\i0 As shown in this diagram, to bind an ItemsControl to a collection object, ItemsSource property is the property to use. You can think of ItemsSource property as the content of the ItemsControl. Note that the binding is OneWay because the ItemsSource property supports OneWay binding by default.\par
\b\fs32 How to Implement Collections\par
\b0\fs24 You can enumerate over any collection that implements the IEnumerable interface. However, to set up dynamic bindings so that insertions or deletions in the collection update the UI automatically, the collection must implement the INotifyCollectionChanged interface. This interface exposes an event that should be raised whenever the underlying collection changes.\par
WPF provides the ObservableCollection<T> class, which is a built-in implementation of a data collection that exposes the INotifyCollectionChanged interface. Note that to fully support transferring data values from source objects to targets, each object in your collection that supports bindable properties must also implement the INotifyPropertyChanged interface. For more information, see Binding Sources Overview.\par
Before implementing your own collection, consider using ObservableCollection<T> or one of the existing collection classes, such as List<T>, Collection<T>, and BindingList<T>, among many others. If you have an advanced scenario and want to implement your own collection, consider using IList, which provides a non-generic collection of objects that can be individually accessed by index and thus the best performance.\par
\b\fs32 Collection Views\par
\b0\fs24 Once your ItemsControl is bound to a data collection, you may want to sort, filter, or group the data. To do that, you use collection views, which are classes that implement the ICollectionView interface.\par
This section contains the following subsections.\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl276\slmult1     What Are Collection Views?\par
{\pntext\f1\'B7\tab}    How to Create a View\par
{\pntext\f1\'B7\tab}    Sorting\par
{\pntext\f1\'B7\tab}    Filtering\par
{\pntext\f1\'B7\tab}    Grouping\par
{\pntext\f1\'B7\tab}    Current Item Pointers\par
{\pntext\f1\'B7\tab}    Master-Detail Binding Scenario\line\par

\pard\sa200\sl276\slmult1\b\fs32 What Are Collection Views?\par
\b0\fs24 A collection view is a layer on top of a binding source collection that allows you to navigate and display the source collection based on sort, filter, and group queries, without having to change the underlying source collection itself. A collection view also maintains a pointer to the current item in the collection. If the source collection implements the INotifyCollectionChanged interface, the changes raised by the CollectionChanged event are propagated to the views.\par
Because views do not change the underlying source collections, each source collection can have multiple views associated with it. For example, you may have a collection of Task objects. With the use of views, you can display that same data in different ways. For example, on the left side of your page you may want to show tasks sorted by priority, and on the right side, grouped by area.\par
\b\fs32 How to Create a View\par
\b0\fs24 One way to create and use a view is to instantiate the view object directly and then use it as the binding source. For example, consider the Data Binding Demo application shown in the What Is Data Binding? section. The application is implemented such that the ListBox binds to a view over the data collection instead of the data collection directly. The following example is extracted from the Data Binding Demo application. The CollectionViewSource class is the Extensible Application Markup Language (XAML) proxy of a class that inherits from CollectionView. In this particular example, the Source of the view is bound to the AuctionItems collection (of type ObservableCollection<T>) of the current application object.\par
XAML\par

\pard\sl240\slmult1 <Window.Resources>\par
...\par
<CollectionViewSource \par
      Source="\{Binding Source=\{x:Static Application.Current\}, Path=AuctionItems\}"   \par
      x:Key="listingDataView" />\par
...\par
</Window.Resources>\line\par

\pard\sa200\sl276\slmult1 The resource listingDataView then serves as the binding source for elements in the application, such as the ListBox:\par
XAML\par

\pard\sl240\slmult1 <ListBox Name="Master" Grid.Row="2" Grid.ColumnSpan="3" Margin="8"\par
    ItemsSource="\{Binding Source=\{StaticResource listingDataView\}\}">\par
...\par
</ListBox>\line\par

\pard\sa200\sl276\slmult1 To create another view for the same collection, you can create another CollectionViewSource instance and give it a different x:Key name.\par
The following table shows which view data types are created as the default collection view or by CollectionViewSource based on the source collection type.\par

\pard\sl240\slmult1 Source collection type\par
Collection view type\par
Notes\par
IEnumerable\par
An internal type based on CollectionView\par
Cannot group items.\par
IList\par
ListCollectionView\par
Fastest.\par
IBindingList\par
BindingListCollectionView\par
Using a Default View\line\par

\pard\sa200\sl276\slmult1 Specifying a collection view as a binding source is one way to create and use a collection view. WPF also creates a default collection view for every collection used as a binding source. If you bind directly to a collection, WPF binds to its default view. Note that this default view is shared by all bindings to the same collection, so a change made to a default view by one bound control or code (such as sorting or a change to the current item pointer, discussed later) is reflected in all other bindings to the same collection.\par
To get the default view, you use the GetDefaultView method. For an example, see How to: Get the Default View of a Data Collection.\par
Collection Views with ADO.NET DataTables\par
To improve performance, collection views for ADO.NET DataTable or DataView objects delegate sorting and filtering to the DataView. This causes sorting and filtering to be shared across all collection views of the data source. To enable each collection view to sort and filter independently, initialize each collection view with its own DataView object.\par
\b\fs32 Sorting\b0\fs24\par
As mentioned before, views can apply a sort order to a collection. As it exists in the underlying collection, your data may or may not have a relevant, inherent order. The view over the collection allows you to impose an order, or change the default order, based on comparison criteria that you supply. Because it is a client-based view of the data, a common scenario is that the user might want to sort columns of tabular data per the value that the column corresponds to. Using views, this user-driven sort can be applied, again without making any changes to the underlying collection or even having to requery for the collection content. For an example, see How to: Sort a GridView Column When a Header Is Clicked.\par
The following example shows the sorting logic of the "Sort by category and date" CheckBox of the application UI in the What Is Data Binding? section:\par

\pard\sl240\slmult1 private void AddSorting(object sender, RoutedEventArgs args)\par
\{\par
    // This sorts the items first by Category and within each Category, \par
    // by StartDate. Notice that because Category is an enumeration, \par
    // the order of the items is the same as in the enumeration declaration\par
    listingDataView.SortDescriptions.Add(\par
        new SortDescription("Category", ListSortDirection.Ascending));\par
    listingDataView.SortDescriptions.Add(\par
        new SortDescription("StartDate", ListSortDirection.Ascending));\par
\}\par

\pard\sa200\sl276\slmult1\par
\b\fs32 Filtering\par
\b0\fs24 Views can also apply a filter to a collection. This means that although an item might exist in the collection, this particular view is intended to show only a certain subset of the full collection. You might filter on a condition in the data. For instance, as is done by the application in the What Is Data Binding? section, the "Show only bargains" CheckBox contains logic to filter out items that cost $25 or more. The following code is executed to set ShowOnlyBargainsFilter as the Filter event handler when that CheckBox is selected:\par
listingDataView.Filter += new FilterEventHandler(ShowOnlyBargainsFilter);\par
The ShowOnlyBargainsFilter event handler has the following implementation:\par

\pard\sl240\slmult1 private void ShowOnlyBargainsFilter(object sender, FilterEventArgs e)\par
\{\par
    AuctionItem product = e.Item as AuctionItem;\par
    if (product != null)\par
    \{\par
        // Filter out products with price 25 or above \par
        if (product.CurrentPrice < 25)\par
        \{\par
            e.Accepted = true;\par
        \}\par
        else\par
        \{\par
            e.Accepted = false;\par
        \}\par
    \}\par
\}\line\par

\pard\sa200\sl276\slmult1 If you are using one of the CollectionView classes directly instead of CollectionViewSource, you would use the Filter property to specify a callback. For an example, see How to: Filter Data in a View.\par
\b\fs32 Grouping\b0\fs24\par
Except for the internal class that views an IEnumerable collection, all collection views support the functionality of grouping, which allows the user to partition the collection in the collection view into logical groups. The groups can be explicit, where the user supplies a list of groups, or implicit, where the groups are generated dynamically depending on the data.\par
The following example shows the logic of the "Group by category" CheckBox:\par

\pard\sl240\slmult1 // This groups the items in the view by the property "Category"\par
PropertyGroupDescription groupDescription = new PropertyGroupDescription();\par
groupDescription.PropertyName = "Category";\par
listingDataView.GroupDescriptions.Add(groupDescription);\line\par

\pard\sa200\sl276\slmult1 For another grouping example, see How to: Group Items in a ListView That Implements a GridView.\par
\b\fs32 Current Item Pointers\par
\b0\fs24 Views also support the notion of a current item. You can navigate through the objects in a collection view. As you navigate, you are moving an item pointer that allows you to retrieve the object that exists at that particular location in the collection. For an example, see How to: Navigate Through the Objects in a Data CollectionView.\par
Because WPF binds to a collection only by using a view (either a view you specify, or the collection's default view), all bindings to collections have a current item pointer. When binding to a view, the slash ("/") character in a Path value designates the current item of the view. In the following example, the data context is a collection view. The first line binds to the collection. The second line binds to the current item in the collection. The third line binds to the Description property of the current item in the collection.\par
XAML\par

\pard\sl240\slmult1 <Button Content="\{Binding \}" />\par
<Button Content="\{Binding Path=/\}" />\par
<Button Content="\{Binding Path=/Description\}" /> \line\par

\pard\sa200\sl276\slmult1 The slash and property syntax can also be stacked to traverse a hierarchy of collections. The following example binds to the current item of a collection named Offices, which is a property of the current item of the source collection.\par
XAML\par
<Button Content="\{Binding /Offices/\}" />\par
The current item pointer can be affected by any sorting or filtering that is applied to the collection. Sorting preserves the current item pointer on the last item selected, but the collection view is now restructured around it. (Perhaps the selected item was at the beginning of the list before, but now the selected item might be somewhere in the middle.) Filtering preserves the selected item if that selection remains in view after the filtering. Otherwise, the current item pointer is set to the first item of the filtered collection view.\par
\b\fs32 Master-Detail Binding Scenario\b0\fs24\par
The notion of a current item is useful not only for navigation of items in a collection, but also for the master-detail binding scenario. Consider the application UI in the What Is Data Binding? section again. In that application, the selection within the ListBox determines the content shown in the ContentControl. To put it in another way, when a ListBox item is selected, the ContentControl shows the details of the selected item.\par
You can implement the master-detail scenario simply by having two or more controls bound to the same view. The following example from the Data Binding Demo shows the markup of the ListBox and the ContentControl you see on the application UI in the What Is Data Binding? section:\par

\pard\sl240\slmult1 XAML\par
<ListBox Name="Master" Grid.Row="2" Grid.ColumnSpan="3" Margin="8"\par
    ItemsSource="\{Binding Source=\{StaticResource listingDataView\}\}">\par
...\par
</ListBox>\par
...\par
<ContentControl Name="Detail" Grid.Row="3" Grid.ColumnSpan="3" \par
        Content="\{Binding Source=\{StaticResource listingDataView\}\}" \par
        ContentTemplate="\{StaticResource detailsProductListingTemplate\}" \par
        Margin="9,0,0,0"/>\par

\pard\sa200\sl276\slmult1\par
Notice that both of the controls are bound to the same source, the listingDataView static resource (see the definition of this resource in the How to Create a View section). This works because when a singleton object (the ContentControl in this case) is bound to a collection view, it automatically binds to the CurrentItem of the view. Note that CollectionViewSource objects automatically synchronize currency and selection. If your list control is not bound to a CollectionViewSource object as in this example, then you would need to set its IsSynchronizedWithCurrentItem property to true for this to work.\par
For other examples, see How to: Bind to a Collection and Display Information Based on Selection and How to: Use the Master-Detail Pattern with Hierarchical Data.\par
You may have noticed that the above example uses a template. In fact, the data would not be displayed the way we wish without the use of templates (the one explicitly used by the ContentControl and the one implicitly used by the ListBox). We now turn to data templating in the next section.\par
\b\fs36 Data Templating\b0\fs24\par
Without the use of data templates, our application UI in the What Is Data Binding? section would look like the following:\par
\i Data Binding Demo without Data Templates\par
\i0 As shown in the example in the previous section, both the ListBox control and the ContentControl are bound to the entire collection object (or more specifically, the view over the collection object) of AuctionItems. Without specific instructions of how to display the data collection, the ListBox is displaying a string representation of each object in the underlying collection and the ContentControl is displaying a string representation of the object it is bound to.\par
To solve that problem, the application defines DataTemplates. As shown in the example in the previous section, the ContentControl explicitly uses the detailsProductListingTemplate DataTemplate. The ListBox control implicitly uses the following DataTemplate when displaying the AuctionItem objects in the collection:\par
XAML\par

\pard\sl240\slmult1 <DataTemplate DataType="\{x:Type src:AuctionItem\}">\par
    <Border BorderThickness="1" BorderBrush="Gray"\par
            Padding="7" Name="border" Margin="3" Width="500">\par
        <Grid>\par
          <Grid.RowDefinitions>\par
            <RowDefinition/>\par
            <RowDefinition/>\par
            <RowDefinition/>\par
            <RowDefinition/>\par
          </Grid.RowDefinitions>\par
          <Grid.ColumnDefinitions>\par
            <ColumnDefinition Width="20"/>\par
            <ColumnDefinition Width="86"/>\par
            <ColumnDefinition Width="*"/>\par
          </Grid.ColumnDefinitions>\par
\par
            <Polygon Grid.Row="0" Grid.Column="0" Grid.RowSpan="4"\par
                     Fill="Yellow" Stroke="Black" StrokeThickness="1"\par
                     StrokeLineJoin="Round" Width="20" Height="20"\par
                     Stretch="Fill"\par
                     Points="9,2 11,7 17,7 12,10 14,15 9,12 4,15 6,10 1,7 7,7"\par
                     Visibility="Hidden" Name="star"/>\par
\par
            <TextBlock Grid.Row="0" Grid.Column="1" Margin="0,0,8,0"\par
                       Name="descriptionTitle"\par
                       Style="\{StaticResource smallTitleStyle\}">Description:</TextBlock>\par
            <TextBlock Name="DescriptionDTDataType" Grid.Row="0" Grid.Column="2" \par
                Text="\{Binding Path=Description\}" \par
                Style="\{StaticResource textStyleTextBlock\}"/>\par
\par
            <TextBlock Grid.Row="1" Grid.Column="1" Margin="0,0,8,0"\par
                       Name="currentPriceTitle"\par
                       Style="\{StaticResource smallTitleStyle\}">Current Price:</TextBlock>\par
            <StackPanel Grid.Row="1" Grid.Column="2" Orientation="Horizontal">\par
                <TextBlock Text="$" Style="\{StaticResource textStyleTextBlock\}"/>\par
                <TextBlock Name="CurrentPriceDTDataType" \par
                    Text="\{Binding Path=CurrentPrice\}" \par
                    Style="\{StaticResource textStyleTextBlock\}"/>\par
            </StackPanel>\par
        </Grid>\par
    </Border>\par
    <DataTemplate.Triggers>\par
        <DataTrigger Binding="\{Binding Path=SpecialFeatures\}">\par
            <DataTrigger.Value>\par
                <src:SpecialFeatures>Color</src:SpecialFeatures>\par
            </DataTrigger.Value>\par
          <DataTrigger.Setters>\par
            <Setter Property="BorderBrush" Value="DodgerBlue" TargetName="border" />\par
            <Setter Property="Foreground" Value="Navy" TargetName="descriptionTitle" />\par
            <Setter Property="Foreground" Value="Navy" TargetName="currentPriceTitle" />\par
            <Setter Property="BorderThickness" Value="3" TargetName="border" />\par
            <Setter Property="Padding" Value="5" TargetName="border" />\par
          </DataTrigger.Setters>\par
        </DataTrigger>\par
        <DataTrigger Binding="\{Binding Path=SpecialFeatures\}">\par
            <DataTrigger.Value>\par
                <src:SpecialFeatures>Highlight</src:SpecialFeatures>\par
            </DataTrigger.Value>\par
            <Setter Property="BorderBrush" Value="Orange" TargetName="border" />\par
            <Setter Property="Foreground" Value="Navy" TargetName="descriptionTitle" />\par
            <Setter Property="Foreground" Value="Navy" TargetName="currentPriceTitle" />\par
            <Setter Property="Visibility" Value="Visible" TargetName="star" />\par
            <Setter Property="BorderThickness" Value="3" TargetName="border" />\par
            <Setter Property="Padding" Value="5" TargetName="border" />\par
        </DataTrigger>\par
    </DataTemplate.Triggers>\par
</DataTemplate>\par

\pard\sa200\sl276\slmult1\par
With the use of those two DataTemplates, the resulting UI is the one shown in the What Is Data Binding? section. As you can see from that screenshot, in addition to letting you place data in your controls, DataTemplates allow you to define compelling visuals for your data. For example, DataTriggers are used in the above DataTemplate so that AuctionItems with SpecialFeatures value of HighLight would be displayed with an orange border and a star.\par
For more information about data templates, see the Data Templating Overview.\par
\b\fs32 Data Validation\b0\fs24\par

\pard\sl240\slmult1 This section contains the following subsections.\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1     Associating Validation Rules with a Binding\par
{\pntext\f1\'B7\tab}    Providing Visual Feedback\par
{\pntext\f1\'B7\tab}    Validation Process\line\par

\pard\sa200\sl276\slmult1 Most applications that take user input need to have validation logic to ensure that the user has entered the expected information. The validation checks can be based on type, range, format, or other application-specific requirements. This section discusses how data validation works in the WPF.\par
\ul Associating Validation Rules with a Binding\ulnone\par
The WPF data binding model allows you to associate ValidationRules with your Binding object. For example, the following example binds a TextBox to a property named StartPrice and adds a ExceptionValidationRule object to the Binding.ValidationRules property.\par
XAML\par

\pard\sl240\slmult1 <TextBox Name="StartPriceEntryForm" Grid.Row="2" Grid.Column="1"\par
    Style="\{StaticResource textStyleTextBox\}" Margin="8,5,0,5">\par
  <TextBox.Text>\par
    <Binding Path="StartPrice" UpdateSourceTrigger="PropertyChanged">\par
      <Binding.ValidationRules>\par
        <ExceptionValidationRule />\par
      </Binding.ValidationRules>\par
    </Binding>\par
  </TextBox.Text>\par
</TextBox>\par
\par

\pard\sa200\sl276\slmult1 A ValidationRule object checks whether the value of a property is valid. WPF has the following two types of built-in ValidationRule objects:\par
    A ExceptionValidationRule checks for exceptions thrown during the update of the binding source property. In the previous example, StartPrice is of type integer. When the user enters a value that cannot be converted to an integer, an exception is thrown, causing the binding to be marked as invalid. An alternative syntax to setting the ExceptionValidationRule explicitly is to set the ValidatesOnExceptions property to true on your Binding or MultiBinding object.\par
    A DataErrorValidationRule object checks for errors that are raised by objects that implement the IDataErrorInfo interface. For an example of using this validation rule, see DataErrorValidationRule. An alternative syntax to setting the DataErrorValidationRule explicitly is to set the ValidatesOnDataErrors property to true on your Binding or MultiBinding object.\par
You can also create your own validation rule by deriving from the ValidationRule class and implementing the Validate method. The following example shows the rule used by the Add Product Listing "Start Date" TextBox from the What Is Data Binding? section:\par

\pard\sl240\slmult1 class FutureDateRule : ValidationRule\par
\{\par
    public override ValidationResult Validate(object value, CultureInfo cultureInfo)\par
    \{\par
        DateTime date;\par
        try\par
        \{\par
            date = DateTime.Parse(value.ToString());\par
        \}\par
        catch (FormatException)\par
        \{\par
            return new ValidationResult(false, "Value is not a valid date.");\par
        \}\par
        if (DateTime.Now.Date > date)\par
        \{\par
            return new ValidationResult(false, "Please enter a date in the future.");\par
        \}\par
        else\par
        \{\par
            return ValidationResult.ValidResult;\par
        \}\par
    \}\par
\}\par
\par

\pard\sa200\sl276\slmult1 The StartDateEntryForm TextBox uses this FutureDateRule, as shown in the following example:\par
XAML\par

\pard\sl240\slmult1 <TextBox Name="StartDateEntryForm" Grid.Row="3" Grid.Column="1" \par
    Validation.ErrorTemplate="\{StaticResource validationTemplate\}" \par
    Style="\{StaticResource textStyleTextBox\}" Margin="8,5,0,5">\par
    <TextBox.Text>\par
        <Binding Path="StartDate" UpdateSourceTrigger="PropertyChanged" \par
            Converter="\{StaticResource dateConverter\}" >\par
            <Binding.ValidationRules>\par
                <src:FutureDateRule />\par
            </Binding.ValidationRules>\par
        </Binding>\par
    </TextBox.Text>\par
</TextBox>\par
\par

\pard\sa200\sl276\slmult1 Note that because the UpdateSourceTrigger value is PropertyChanged, the binding engine updates the source value on every keystroke, which means it also checks every rule in the ValidationRules collection on every keystroke. We discuss this further in the Validation Process section.\par
\b\fs32 Providing Visual Feedback\b0\fs24\par
If the user enters an invalid value, you may want to provide some feedback about the error on the application UI. One way to provide such feedback is to set the Validation.ErrorTemplate attached property to a custom ControlTemplate. As shown in the previous subsection, the StartDateEntryForm TextBox uses an ErrorTemplate called validationTemplate. The following example shows the definition of validationTemplate:\par
XAML\par

\pard\sl240\slmult1 <ControlTemplate x:Key="validationTemplate">\par
  <DockPanel>\par
    <TextBlock Foreground="Red" FontSize="20">!</TextBlock>\par
    <AdornedElementPlaceholder/>\par
  </DockPanel>\par
</ControlTemplate>\par
\par

\pard\sa200\sl276\slmult1 The AdornedElementPlaceholder element specifies where the control being adorned should be placed.\par
In addition, you may also use a ToolTip to display the error message. Both the StartDateEntryForm and the StartPriceEntryForm TextBoxes use the style textStyleTextBox, which creates a ToolTip that displays the error message. The following example shows the definition of textStyleTextBox. The attached property Validation.HasError is true when one or more of the bindings on the properties of the bound element are in error.\par
XAML\par

\pard\sl240\slmult1 <Style x:Key="textStyleTextBox" TargetType="TextBox">\par
  <Setter Property="Foreground" Value="#333333" />\par
  <Setter Property="MaxLength" Value="40" />\par
  <Setter Property="Width" Value="392" />\par
  <Style.Triggers>\par
    <Trigger Property="Validation.HasError" Value="true">\par
      <Setter Property="ToolTip"\par
        Value="\{Binding RelativeSource=\{RelativeSource Self\},\par
                        Path=(Validation.Errors)[0].ErrorContent\}"/>\par
    </Trigger>\par
  </Style.Triggers>\par
</Style>\par
\par

\pard\sa200\sl276\slmult1 With the custom ErrorTemplate and the ToolTip, the StartDateEntryForm TextBox looks like the following when there is a validation error:\par
\i Data binding validation error\par
\i0 If your Binding has associated validation rules but you do not specify an ErrorTemplate on the bound control, a default ErrorTemplate will be used to notify users when there is a validation error. The default ErrorTemplate is a control template that defines a red border in the adorner layer. With the default ErrorTemplate and the ToolTip, the UI of the StartPriceEntryForm TextBox looks like the following when there is a validation error:\par
\i Data binding validation error\par
\i0 For an example of how to provide logic to validate all controls in a dialog box, see the Custom Dialog Boxes section in the Dialog Boxes Overview.\par
\b\fs32 Validation Process\b0\fs24\par
Validation usually occurs when the value of a target is transferred to the binding source property. This occurs on TwoWay and OneWayToSource bindings. To reiterate, what causes a source update depends on the value of the UpdateSourceTrigger property, as described in the What Triggers Source Updates section.\par
The following describes the validation process. Note that if a validation error or other type of error occurs at any time during this process, the process is halted.\par
    The binding engine checks if there are any custom ValidationRule objects defined whose ValidationStep is set to RawProposedValue for that Binding, in which case it calls the Validate method on each ValidationRule until one of them runs into an error or until all of them pass.\par
    The binding engine then calls the converter, if one exists.\par
    If the converter succeeds, the binding engine checks if there are any custom ValidationRule objects defined whose ValidationStep is set to ConvertedProposedValue for that Binding, in which case it calls the Validate method on each ValidationRule that has ValidationStep set to ConvertedProposedValue until one of them runs into an error or until all of them pass.\par
    The binding engine sets the source property.\par
    The binding engine checks if there are any custom ValidationRule objects defined whose ValidationStep is set to UpdatedValue for that Binding, in which case it calls the Validate method on each ValidationRule that has ValidationStep set to UpdatedValue until one of them runs into an error or until all of them pass. If a DataErrorValidationRule is associated with a binding and its ValidationStep is set to the default, UpdatedValue, the DataErrorValidationRule is checked at this point. This is also the point when bindings that have the ValidatesOnDataErrors set to true are checked.\par
    The binding engine checks if there are any custom ValidationRule objects defined whose ValidationStep is set to CommittedValue for that Binding, in which case it calls the Validate method on each ValidationRule that has ValidationStep set to CommittedValue until one of them runs into an error or until all of them pass.\par
If a ValidationRule does not pass at any time throughout this process, the binding engine creates a ValidationError object and adds it to the Validation.Errors collection of the bound element. Before the binding engine runs the ValidationRule objects at any given step, it removes any ValidationError that was added to the Validation.Errors attached property of the bound element during that step. For example, if a ValidationRule whose ValidationStep is set to UpdatedValue failed, the next time the validation process occurs, the binding engine removes that ValidationError immediately before it calls any ValidationRule that has ValidationStep set to UpdatedValue.\par
When Validation.Errors is not empty, the Validation.HasError attached property of the element is set to true. Also, if the NotifyOnValidationError property of the Binding is set to true, then the binding engine raises the Validation.Error attached event on the element.\par
Also note that a valid value transfer in either direction (target to source or source to target) clears the Validation.Errors attached property.\par
If the binding either has an ExceptionValidationRule associated with it, or had the ValidatesOnExceptions property is set to true and an exception is thrown when the binding engine sets the source, the binding engine checks to see if there is a UpdateSourceExceptionFilter. You have the option to use the UpdateSourceExceptionFilter callback to provide a custom handler for handling exceptions. If an UpdateSourceExceptionFilter is not specified on the Binding, the binding engine creates a ValidationError with the exception and adds it to the Validation.Errors collection of the bound element.\par
\b\fs32 Debugging Mechanism\par
\b0\fs24 You can set the attached property PresentationTraceSources.TraceLevel on a binding-related object to receive information about the status of a specific binding.\par
\par
}
 